{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","value","Component","Counters","onReset","counters","map","key","App","state","handleReset","c","setState","handleDelete","counterId","filter","handleIncrement","index","indexOf","console","log","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAoBeA,G,MAhBA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACd,OACI,yBAAKC,UAAU,gCACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UAEA,0BAAMD,UAAU,oCACXD,MCiBFG,E,uKAvBD,IAAD,OACL,OACI,6BAEI,0BAAMF,UAAWG,KAAKC,mBAAtB,IAA2CD,KAAKE,cAAhD,KAEA,4BAAQC,QAAS,WAAQ,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UAAaT,UAAU,4BAAlF,cAEA,4BAAQM,QAAS,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KAAKX,UAAU,6BAA7E,a,wCAOR,MADc,oBACiC,IAA7BG,KAAKI,MAAME,QAAQG,MAAc,UAAY,a,oCAEpD,IACHA,EAAUT,KAAKI,MAAME,QAArBG,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GArBhBC,aCwBPC,E,uKArBD,IAAD,EACgDX,KAAKI,MAAlDQ,EADH,EACGA,QAASC,EADZ,EACYA,SAAUN,EADtB,EACsBA,SAAUF,EADhC,EACgCA,YACrC,OACI,6BACI,4BACIF,QAASS,EACTf,UAAU,0BAFd,SAGCgB,EAASC,KAAI,SAAAR,GAAO,OACjB,kBAAC,EAAD,CACIS,IAAKT,EAAQE,GACbD,SAAUA,EACVF,YAAaA,EACbC,QAASA,Y,GAdVI,aCkERM,E,kDArDb,aAAe,IAAD,8BACZ,gBAVFC,MAAQ,CACNJ,SAAU,CACR,CAAEL,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,KAIN,EAUdS,YAAc,WACZ,IAAML,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAK,GAEvC,OADAA,EAAEV,MAAQ,EACHU,KAET,EAAKC,SAAS,CAAEP,cAfJ,EAkBdQ,aAAe,SAAAC,GACb,IAAMT,EAAW,EAAKI,MAAMJ,SAASU,QAAO,SAAAJ,GAAC,OAAIA,EAAEX,KAAOc,KAC1D,EAAKF,SAAS,CAAEP,cApBJ,EAuBdW,gBAAkB,SAAAlB,GAChB,IAAMO,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BY,EAAQZ,EAASa,QAAQpB,GAE/BO,EAASY,GAAT,eAAuBnB,GACvBO,EAASY,GAAOhB,QAChB,EAAKW,SAAS,CAAEP,cA3BhBc,QAAQC,IAAI,mBAFA,E,gEAOZD,QAAQC,IAAI,mB,+BA4BZ,OADAD,QAAQC,IAAI,gBAGV,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAQjC,cAAeI,KAAKiB,MAAMJ,SAASU,QAAO,SAAAJ,GAAC,OAAIA,EAAEV,MAAQ,KAAGqB,SACpE,0BAAMjC,UAAU,aACd,kBAAC,EAAD,CACEgB,SAAUb,KAAKiB,MAAMJ,SACrBD,QAASZ,KAAKkB,YACdb,YAAaL,KAAKwB,gBAClBjB,SAAUP,KAAKqB,qB,GAvDTX,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.d73b7072.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// stateless Functional Component\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n            {/* NavBar{\"\"} */}\r\n            <span className=\"badge badge-pill badge-secondary\">\r\n                {totalCounters}\r\n            </span>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <span className={this.getBadgeClasses()}> {this.formatCount()} </span>\r\n\r\n                <button onClick={() => { this.props.onIncrement(this.props.counter); }} className=\"btn btn-secondary btn-sm\"> Increment</button>\r\n\r\n                <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button>\r\n            </div >\r\n        );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        return classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    }\r\n    formatCount() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? 'Zero' : value;\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n\r\n    render() {\r\n        const { onReset, counters, onDelete, onIncrement } = this.props;\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={onReset}\r\n                    className=\"btn-primary btn-sm m-2\">Reset</button>\r\n                {counters.map(counter =>\r\n                    <Counter\r\n                        key={counter.id}\r\n                        onDelete={onDelete}\r\n                        onIncrement={onIncrement}\r\n                        counter={counter} >\r\n                    </Counter>\r\n                )}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counters;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\n\nclass App extends Component {\n\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 4 },\n    ]\n  };\n\n  constructor() {\n    super();\n    console.log('App-Constructor');\n  }\n\n  componentDidMount() {\n    // Ajax call\n    console.log('App - Mounted');\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  }\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  }\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  }\n\n  render() {\n\n    console.log('App rendered');\n    return (\n\n      <React.Fragment>\n        <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length} />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment >\n\n    );\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}